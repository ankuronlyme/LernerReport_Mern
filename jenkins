pipeline {
    agent any
    
    environment {
        DOCKER_HUB_KEY = credentials('ankurdockercredentials')
        DOCKER_IMAGE_FRONTEND = 'ankuronlyme/leraner_frontend'
        DOCKER_IMAGE_BACKEND = 'ankuronlyme/leraner_backend'
        DOCKER_TAG = "${env.BUILD_ID}"

        GITHUB_URL = 'https://github.com/ankuronlyme/LernerReport_Mern.git'
        GIT_BRANCH = 'main'
        
        HELM_CHART_PATH_BE = './learner-chart/backend-chart'
        HELM_CHART_PATH_FE = './learner-chart/frontend-chart'
        AWS_REGION = 'us-east-1'
    // AWS_EKS_CLUSTER_NAME = 'ankur-eks-cluster-jenkins'
    }
    
    stages {
        stage('Checkout from Git') {
            steps {
                git branch: env.GIT_BRANCH, url: env.GITHUB_URL
            }
        }
  stage('Build Docker Image') {
            parallel {
                stage('build backend') {
                    steps {
                        script {
                            // Build Docker image
                            docker.withRegistry('https://index.docker.io/v1/', 'ankurdockercredentials') {
                                def customImage = docker.build("${env.DOCKER_IMAGE_BACKEND}:${env.BUILD_ID}", "./learner_backend") 
                                customImage.push()
                            }
                        }
                    }
                }
                stage('build frontend') {
                    steps {
                        script {
                            docker.withRegistry('https://index.docker.io/v1/', 'ankurdockercredentials') {
                                def customImage = docker.build("${env.DOCKER_IMAGE_FRONTEND}:${env.BUILD_ID}", "./learner_frontend")
                                customImage.push()
                            }
                        }
                    }
                }
             stage('Connect to EKS') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'aws-config', region: env.AWS_REGION)]) {
                        def eksClusterExists = bat(script: "aws eks describe-cluster --name ${env.AWS_EKS_CLUSTER_NAME} --region ${env.AWS_REGION}", 
                                                   returnStatus: true) == 0
                        if (!eksClusterExists) {
                            bat """
                            eksctl create cluster --name ${env.AWS_EKS_CLUSTER_NAME} --region ${env.AWS_REGION} --nodegroup-name standard-workers --node-type t2.micro --nodes 2 --nodes-min 1 --nodes-max 3
                            """
                        }
                    }
                }
            }
             }
            }
  }